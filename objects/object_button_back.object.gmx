<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_button_mask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    image_xscale = room_width / sprite_width;
    image_yscale = 2;
    image_alpha = 0.25;

    button_nextstage = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    if( button_move ) {
    
        x = lerp( x, button_point, 0.1 );
        if( round( x ) == button_point ) {
        
            x = round( x );
            button_move = false;
            if( button_destroy ) {
            
                if( room = room_menu ) { instance_destroy(); }
                else if( room = room_finish &amp;&amp; !button_nextstage) {
                
                    global.game_esc = true;
                    room_goto( room_menu );
        
                }
            
            }
        
        }
    
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    if( !button_move ) {
    
        if( room = room_menu ) {
        
            button_move = true;
            button_point = x + room_width;
            button_destroy = true;
            
            button_action_create_world( 128, 16, 1, -1 );
            
            with( object_world ) {
            
                button_move = true;
                button_point = x + room_width;
                button_destroy = true;
            
            }
            with( object_button_prev ) {
            
                button_move = true;
                button_point = x + room_width;
                button_destroy = true;
            
            }
            with( object_button_next ) {
            
                button_move = true;
                button_point = x + room_width;
                button_destroy = true;
            
            }
            with( object_button_stage ) {
            
                button_move = true;
                button_point = x + room_width;
                button_destroy = true;
            
            }
            if( global.world == 4 ) {
            
                with( object_button_custom_small ) {
                
                    button_move = true;
                    button_point = x + room_width;
                    button_destroy = true;
                
                }
                with( object_button_custom_medium ) {
                
                    button_move = true;
                    button_point = x + room_width;
                    button_destroy = true;
                
                }
                with( object_button_custom_large ) {
                
                    button_move = true;
                    button_point = x + room_width;
                    button_destroy = true;
                
                }
            
            }
            
        } else if( room = room_finish ) {
        
            button_move = true;
            button_point = x - room_width;
            button_destroy = true;
            
            with( object_button_nextstage ) {
            
                button_move = true;
                button_point = x - room_width;
                button_destroy = true;
            
            }
            with( object_record_death ) {
            
                button_move = true;
                button_point = x - room_width;
                button_destroy = true;
                
                if( x &gt; room_width * 1.5 ) { instance_destroy(); }
            
            }
            with( object_record_fire ) {
            
                button_move = true;
                button_point = x - room_width;
                button_destroy = true;
                
                if( x &gt; room_width * 1.5 ) { instance_destroy(); }
            
            }
            with( object_record_time ) {
            
                button_move = true;
                button_point = x - room_width;
                button_destroy = true;
                
                if( x &gt; room_width * 1.5 ) { instance_destroy(); }
            
            }
            with( object_record_completion ) {
            
                button_move = true;
                button_point = x - room_width;
                button_destroy = true;
                
                if( x &gt; room_width * 1.5 ) { instance_destroy(); }
            
            }
        
        }
    
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    draw_self();
    
    draw_set_font( font_18 );
    draw_set_halign( fa_center );
    draw_set_valign( fa_middle );
    
    draw_set_colour( c_black );
    if( room = room_menu ) { draw_text( x, y, "뒤로" ); }
    else if( room = room_finish ) { draw_text( x, y, "스테이지 메뉴" ); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
