<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ingame block surface

    // using surface to optimize

    shadow_surface = noone;
    water_surface = noone;
    block_surface = noone;
    
    broken_shadow_surface = noone;
    broken_block_surface = noone;
    
    jumper_shadow_surface = noone;
    jumper_block_surface = noone;
    
    // surface update
    
    surface_update_water = false;
    
    surface_update_filter = false;
    surface_update_sponge = false;
    surface_update_purifier = false;
    
    surface_update_broken = false;
    
    surface_update_jumper = false;
    
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Instance number
    
    number_broken = instance_number( object_broken );
    
    number_jumper = instance_number( object_leaf );
    
    number_water = instance_number( object_water );
    number_pollution = instance_number( object_pollution );
    
    number_fire = instance_number( object_fire );
        
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy surface

    surface_action_remove();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy surface

    surface_action_remove();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shadow Surface

    // Broken shadow surface
    
    if( number_broken != 0 ) { 
        
        if( surface_exists( broken_shadow_surface ) ) {
        
            if( surface_update_broken ) {
            
                surface_set_target( broken_shadow_surface );
                
                draw_clear_alpha( c_white,0 );
            
                with( object_broken ) { draw_sprite_ext( sprite_index, 0, x, y + 16, 1, 1, 0, c_black, 0.5 ); }
            
                surface_reset_target();
            
            }
            draw_surface( broken_shadow_surface, 0, 0 );
        
        } else { 
        
            broken_shadow_surface = surface_create( room_width, room_height );
            
            surface_set_target( broken_shadow_surface );
            
            draw_clear_alpha( c_white,0 );
            
            with( object_broken ) { draw_sprite_ext( sprite_index, 0, x, y + 16, 1, 1, 0, c_black, 0.5 ); }
            
            surface_reset_target();
        
        }
    
    }
    
    // Other shadow surface

    if( surface_exists( shadow_surface ) ) { draw_surface( shadow_surface, 0, 0 ); } else { 
    
        shadow_surface = surface_create( room_width, room_height );
        
        surface_set_target( shadow_surface );
        
        draw_clear_alpha( c_white,0 );
        
        with( object_block ) { draw_sprite_ext( sprite_index, 0, x, y + 16, 1, 1, 0, c_black, 0.5 ); }
        with( object_pipe ) { draw_sprite_ext( sprite_index, 0, x, y + 16, 1, 1, 0, c_black, 0.5 ); }
        with( object_pipe_in ) { draw_sprite_ext( sprite_index, 0, x, y + 16, 1, 1, 0, c_black, 0.5 ); }
        with( object_pipe_out ) { draw_sprite_ext( sprite_index, 0, x, y + 16, 1, 1, 0, c_black, 0.5 ); }
        with( object_filter ) { draw_sprite_ext( sprite_index, 0, x, y + 16, 1, 1, 0, c_black, 0.5 ); }
        with( object_sponge ) { draw_sprite_ext( sprite_index, 0, x, y + 16, 1, 1, 0, c_black, 0.5 ); }
        with( object_purifier ) { draw_sprite_ext( sprite_index, 0, x, y + 16, 1, 1, 0, c_black, 0.5 ); }
        with( object_drain_up ) { draw_sprite_ext( sprite_index, 0, x, y + 16, 1, 1, 0, c_black, 0.5 ); }
        with( object_drain_down ) { draw_sprite_ext( sprite_index, 0, x, y + 16, 1, 1, 0, c_black, 0.5 ); }
        
        switch( global.world ) {
        
            case 0 : 
                    
                with( object_water ) { draw_sprite_ext( sprite_block_white, 0, x, y, 1, 1, 0, c_silver, 1 ); }
                with( object_pollution ) { draw_sprite_ext( sprite_block_white, 0, x, y, 1, 1, 0, c_silver, 1 ); }
                break;
                    
        }
        
        surface_reset_target();
    
    }
    
    with( object_ball ) { draw_sprite_ext( sprite_index, image_index, x, y + 16, 1, 1, 0, c_black, 0.1 ); }
    
    // Jumper shadow surface
    
    if( number_jumper != 0 ) { 
        
        if( surface_exists( jumper_shadow_surface ) ) {
        
            if( surface_update_jumper ) {
            
                surface_set_target( jumper_shadow_surface );
                
                draw_clear_alpha( c_white,0 );
            
                with( object_leaf ) { draw_sprite_ext( sprite_index, 0, x, y + 16, image_xscale, image_yscale, 0, c_black, 0.5 ); }
            
                surface_reset_target();
            
            }
            draw_surface( jumper_shadow_surface, 0, 0 );
        
        } else { 
        
            jumper_shadow_surface = surface_create( room_width, room_height );
            
            surface_set_target( jumper_shadow_surface );
            
            draw_clear_alpha( c_white,0 );
            
            with( object_leaf ) { draw_sprite_ext( sprite_index, 0, x, y + 16, image_xscale, image_yscale, 0, c_black, 0.5 ); }
            
            surface_reset_target();
        
        }
    
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Water surface
    
    if( number_water != 0 || number_pollution != 0 ) {
    
        if( surface_exists( water_surface ) ) {
        
            if( surface_update_water ) {
            
                surface_set_target( water_surface );
            
                draw_clear_alpha( c_white,0 );
                
                with( object_water ) { draw_sprite( sprite_index, 0, x, y + 64 * water_used ); }
                with( object_pollution ) { draw_sprite( sprite_index, 0, x, y + 64 * pollution_used ); }
            
                surface_reset_target();
                
                surface_update_water = !surface_update_water;
            
            }
            draw_surface( water_surface, 0, 0 );
        
        } else {
        
            water_surface = surface_create( room_width, room_height );
            
            surface_set_target( water_surface );
            
            draw_clear_alpha( c_white,0 );
            
            switch( global.world ) {
        
                case 0 : 
                    
                    with( object_water ) { draw_sprite_ext( sprite_block_white, 0, x, y, 1, 1, 0, c_silver, 1 ); }
                    with( object_pollution ) { draw_sprite_ext( sprite_block_white, 0, x, y, 1, 1, 0, c_silver, 1 ); }
                    break;
                    
            }
                
            with( object_water ) { draw_sprite( sprite_index, 0, x, y + 64 * water_used ); }
            with( object_pollution ) { draw_sprite( sprite_index, 0, x, y + 64 * pollution_used ); }
            
            surface_reset_target();
        
        }
    
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Block surface
    
    // Broken block surface

    if( number_broken != 0 ) { 
        
        if( surface_exists( broken_block_surface ) ) {
        
            if( surface_update_broken ) {
            
                surface_set_target( broken_block_surface );
                
                draw_clear_alpha( c_white,0 );
            
                with( object_broken ) { draw_sprite( sprite_index, 0, x, y ); }
            
                surface_reset_target();
                
                surface_update_broken = !surface_update_broken;
            
            }
            draw_surface( broken_block_surface, 0, 0 );
        
        } else { 
        
            broken_block_surface = surface_create( room_width, room_height );
            
            surface_set_target( broken_block_surface );
            
            draw_clear_alpha( c_white,0 );
            
            with( object_broken ) { draw_sprite( sprite_index, 0, x, y ); }
            
            surface_reset_target();
        
        }
    
    }
    
    // Other block surface
    
    if( surface_exists( block_surface ) ) {
    
        if( surface_update_filter ) {  // Filter Update
        
            surface_set_target( block_surface );
            with( object_filter ) {
        
                draw_sprite( sprite_index, 0, x, y );
                draw_set_alpha( filter_used );
                draw_sprite( sprite_index, 1, x, y );
                draw_set_alpha( 1 );
                
            }
            surface_reset_target();
            surface_update_filter = !surface_update_filter;
        
        }
        if( surface_update_sponge ) {  // Sponge Update
        
            surface_set_target( block_surface );
            with( object_sponge ) {
        
                draw_sprite( sprite_index, 0, x, y );
                draw_set_alpha( sponge_used );
                draw_sprite( sprite_index, 1, x, y );
                draw_set_alpha( 1 );
                
            }
            surface_reset_target();
            surface_update_sponge = !surface_update_sponge;
        
        }
        if( surface_update_purifier ) {  // Purifier Update
        
            surface_set_target( block_surface );
            with( object_purifier ) {
        
                draw_sprite( sprite_index, 0, x, y );
                draw_set_alpha( purifier_used );
                draw_sprite( sprite_index, 1, x, y );
                draw_set_alpha( 1 );
                
            }
            surface_reset_target();
            surface_update_purifier = !surface_update_purifier;
        
        }
        draw_surface( block_surface, 0, 0 );

    } else { 
    
        block_surface = surface_create( room_width, room_height );
        
        surface_set_target( block_surface );
        
        draw_clear_alpha( c_white,0 );
        
        with( object_block ) { draw_sprite( sprite_index, 0, x, y ); }
        with( object_pipe ) { draw_sprite( sprite_index, 0, x, y ); }
        with( object_pipe_in ) { draw_sprite( sprite_index, 0, x, y ); }
        with( object_pipe_out ) { draw_sprite( sprite_index, 0, x, y ); }
        with( object_filter ) { draw_sprite( sprite_index, 0, x, y ); }
        with( object_sponge ) { draw_sprite( sprite_index, 0, x, y ); }
        with( object_purifier ) { draw_sprite( sprite_index, 0, x, y ); }
        with( object_drain_up ) { draw_sprite( sprite_index, 0, x, y ); }
        with( object_drain_down ) { draw_sprite( sprite_index, 0, x, y ); }
        
        surface_reset_target();
    
    }
    
    // Jumper block surface

    if( number_jumper != 0 ) { 
        
        if( surface_exists( jumper_block_surface ) ) {
        
            if( surface_update_jumper ) {
            
                surface_set_target( jumper_block_surface );
                
                draw_clear_alpha( c_white,0 );
            
                with( object_leaf ) { draw_sprite_ext( sprite_index, 0, x, y, image_xscale, image_yscale, 0, c_white, 1 ); }
            
                surface_reset_target();
            
            }
            draw_surface( jumper_block_surface, 0, 0 );
        
        } else { 
        
            jumper_block_surface = surface_create( room_width, room_height );
            
            surface_set_target( jumper_block_surface );
            
            draw_clear_alpha( c_white,0 );
            
            with( object_leaf ) { draw_sprite_ext( sprite_index, 0, x, y, image_xscale, image_yscale, 0, c_white, 1 ); }
            
            surface_reset_target();
        
        }
    
    }

    // Fire
    
    if( number_fire != 0 ) { with( object_fire ) { draw_sprite_ext( sprite_index, -1, x, y, fire_scale, fire_scale, 0, c_white, 1 ); } }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Effect

    with( object_effect_broken ) { draw_sprite_ext( sprite_index, image_index, x, y, 1, 1, image_angle, c_white, image_alpha ); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
