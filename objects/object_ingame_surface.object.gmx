<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ingame block surface
// using surface to optimize

    shadow_surface = noone;
    block_surface = noone;
    
    
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gui

    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy surface

    surface_action_remove();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy surface

    surface_action_remove();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Surface
    
    if( surface_exists( shadow_surface ) ) { draw_surface( shadow_surface, 0, 0 ); } else { 
    
        shadow_surface = surface_create( room_width, room_height );
        
        surface_set_target( shadow_surface );
        
        draw_clear_alpha( c_white,0 );
        
        with( object_block ) { draw_sprite_ext( sprite_index, image_index, x, y + 16, 1, 1, 0, c_black, 0.5 ); }
        with( object_pipe ) { draw_sprite_ext( sprite_index, image_index, x, y + 16, 1, 1, 0, c_black, 0.5 ); }
        with( object_filter ) { draw_sprite_ext( sprite_index, image_index, x, y + 16, 1, 1, 0, c_black, 0.5 ); }
        with( object_sponge ) { draw_sprite_ext( sprite_index, image_index, x, y + 16, 1, 1, 0, c_black, 0.5 ); }
        with( object_purifier ) { draw_sprite_ext( sprite_index, image_index, x, y + 16, 1, 1, 0, c_black, 0.5 ); }
        with( object_drain_up ) { draw_sprite_ext( sprite_index, image_index, x, y + 16, 1, 1, 0, c_black, 0.5 ); }
        with( object_drain_down ) { draw_sprite_ext( sprite_index, image_index, x, y + 16, 1, 1, 0, c_black, 0.5 ); }
        switch( global.world ) {
        
            case 0 : 
            
                with( object_water ) { draw_sprite_ext( sprite_block_white, 0, x, y, 1, 1, 0, c_silver, 1 ); }
                with( object_pollution ) { draw_sprite_ext( sprite_block_white, 0, x, y, 1, 1, 0, c_silver, 1 ); }
                break;
            
        }
        
        surface_reset_target();
    
    }
    
    with( object_filter ) { draw_sprite( sprite_index, 0, x, y ); draw_set_alpha( 1 - filter_health / filter_health_max ); draw_sprite( sprite_index, 1, x, y ); draw_set_alpha( 1 ); }
    with( object_sponge ) { draw_sprite( sprite_index, 0, x, y ); draw_set_alpha( 1 - sponge_health / sponge_health_max ); draw_sprite( sprite_index, 1, x, y ); draw_set_alpha( 1 ); }
    with( object_purifier ) { draw_sprite( sprite_index, 0, x, y ); draw_set_alpha( 1 - purifier_health / purifier_health_max ); draw_sprite( sprite_index, 1, x, y ); draw_set_alpha( 1 ); }
    with( object_leaf ) { draw_sprite_ext( sprite_index, 0, x, y, image_xscale, image_yscale, 0, c_white, 1 ); }
    
    with( object_water ) { draw_sprite( sprite_index, 0, x, y + 64 * ( 1 - ( water_amount / water_amount_max ) ) ); }
    with( object_pollution ) { draw_sprite( sprite_index, 0, x, y + 64 * ( 1 - ( pollution_amount / pollution_amount_max ) ) ); }
    
    if( surface_exists( block_surface ) ) { draw_surface( block_surface, 0, 0 ); } else { 
    
        block_surface = surface_create( room_width, room_height );
        
        surface_set_target( block_surface );
        
        draw_clear_alpha( c_white,0 );
        
        with( object_block ) { draw_sprite( sprite_index, image_index, x, y ); }
        with( object_pipe ) { draw_sprite( sprite_index, image_index, x, y ); }
        with( object_drain_up ) { draw_sprite( sprite_index, image_index, x, y ); }
        with( object_drain_down ) { draw_sprite( sprite_index, image_index, x, y ); }
        
        surface_reset_target();
    
    }
    
    with( object_fire ) { draw_sprite_ext( sprite_index, -1, x, y, 0.2 + 0.8 * fire_health / fire_health_max, 0.2 + 0.8 * fire_health / fire_health_max, 0, c_white, 1 ); }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
