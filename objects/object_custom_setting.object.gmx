<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    // Size
    
    custom_size = 0;
    var size_name = room_get_name( room );
    if( size_name == room_custom_small ) { custom_size = 1; }
    if( size_name == room_custom_medium ) { custom_size = 2; }
    if( size_name == room_custom_large ) { custom_size = 3; }
    
    // Grid
    
    grid_width = room_width div 64;
    grid_height = room_height div 64;
    
    for( var i = 0; i &lt; grid_width; i++ ) { for( var j = 0; j &lt; grid_height; j++ ) { grid[i,j] = noone; } }
    
    grid_mouse_x = floor( mouse_x / 64 );
    grid_mouse_y = floor( mouse_y / 64 );
    grid_mouse_xx = grid_mouse_x * 64;
    grid_mouse_yy = grid_mouse_y * 64;
    
    grid_empty = true;
    
    // Item
    
    item_page = 0;
    item_block = 0;
    item_delete = false;
    
    item_ball = false;
    item_pipe = false;
    item_pipe_in = false;
    item_pipe_out = false;
    
    // Other
    
    saved = false;
    
    // Camera
    
    camera = false;
    camera_move = false;
    
    camera_x = 0;
    camera_y = 0;
    camera_xview = 0;
    camera_yview = 0;
    
    xview_prev = 0;
    yview_prev = 0;
    
    // Surface
    
    surface = noone;
    surface_update = false;
    
    //
    
    instance_create( x, y, object_custom_menu );
    
    instance_create( x, y, object_custom_prev );
    instance_create( x, y, object_custom_block_1 );
    instance_create( x, y, object_custom_block_2 );
    instance_create( x, y, object_custom_block_3 );
    instance_create( x, y, object_custom_block_4 );
    instance_create( x, y, object_custom_block_5 );
    instance_create( x, y, object_custom_next );
    
    instance_create( x, y, object_custom_delete );
    instance_create( x, y, object_custom_camera );
    
    instance_create( x, y, object_custom_save_prev );
    instance_create( x, y, object_custom_save );
    instance_create( x, y, object_custom_save_next );
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    // Grid setting

    grid_mouse_x = floor( mouse_x / 64 );
    grid_mouse_y = floor( mouse_y / 64 );
    grid_mouse_xx = grid_mouse_x * 64;
    grid_mouse_yy = grid_mouse_y * 64;
    
    // Add block
    
    if( ( grid_mouse_x &gt;= 0 &amp;&amp; grid_mouse_x &lt; grid_width ) &amp;&amp; ( grid_mouse_y &gt;= 0 &amp;&amp; grid_mouse_y &lt; grid_height ) ) {
    
        if( grid[grid_mouse_x,grid_mouse_y] == noone ) { grid_empty = true; }
        else { grid_empty = false; }
        
        if( ( object_custom_menu.menu_on &amp;&amp; grid_mouse_yy &lt; view_yview + view_hview - 144 ) || !object_custom_menu.menu_on ) {
            
            if( !camera &amp;&amp; !camera_move ) {
            
                if( mouse_check_button( mb_left ) &amp;&amp; grid_empty &amp;&amp; !item_delete ) {
                
                    switch( item_block ) {
                    
                        case 0 : if( !item_ball ) { grid[grid_mouse_x,grid_mouse_y] = item_block; item_ball = true; surface_update = true; } break;
                        case 2 : if( !item_pipe ) { grid[grid_mouse_x,grid_mouse_y] = item_block; item_pipe = true; surface_update = true; } break;
                        case 3 : if( !item_pipe_in ) { grid[grid_mouse_x,grid_mouse_y] = item_block; item_pipe_in = true; surface_update = true; } break;
                        case 4 : if( !item_pipe_out ) { grid[grid_mouse_x,grid_mouse_y] = item_block; item_pipe_out = true; surface_update = true; } break;
                        
                        default : grid[grid_mouse_x,grid_mouse_y] = item_block surface_update = true;
                    
                    }
                    
                    saved = false;
                
                } else if( mouse_check_button( mb_right ) || ( mouse_check_button( mb_left ) &amp;&amp; item_delete ) ) {
                    
                    switch( grid[grid_mouse_x,grid_mouse_y] ) {
                    
                        case 0 : item_ball = false; grid[grid_mouse_x,grid_mouse_y] = noone; break;
                        case 2 : item_pipe = false; grid[grid_mouse_x,grid_mouse_y] = noone; break;
                        case 3 : item_pipe_in = false; grid[grid_mouse_x,grid_mouse_y] = noone; break;
                        case 4 : item_pipe_out = false; grid[grid_mouse_x,grid_mouse_y] = noone; break;
                        
                        default :  grid[grid_mouse_x,grid_mouse_y] = noone;
                    
                    }
                    surface_update = true;
                    item_delete = true;
                    saved = false;
                
                }
            
            } else {
            
                if( mouse_check_button_pressed( mb_left ) ) {
                
                    camera_move = true;
                
                    camera_x = device_mouse_raw_x( 0 );
                    camera_y = device_mouse_raw_y( 0 );
                    camera_xview = view_xview + device_mouse_raw_x( 0 );
                    camera_yview = view_yview + device_mouse_raw_y( 0 );
                    
                    xview_prev = view_xview;
                    yview_prev = view_yview;
                    
                    object_custom_menu.menu_on = false;
                
                }
                if( mouse_check_button( mb_left ) ) {
                
                    var dis = point_distance( device_mouse_raw_x( 0 ), device_mouse_raw_y( 0 ), camera_x, camera_y );
                    var dir = point_direction( device_mouse_raw_x( 0 ), device_mouse_raw_y( 0 ), camera_x, camera_y );
                    
                    view_xview = camera_xview + lengthdir_x( dis, dir ) - camera_x;
                    view_yview = camera_yview + lengthdir_y( dis, dir ) - camera_y;
                    
                    view_xview = clamp( view_xview, 0, room_width - view_wview );
                    view_yview = clamp( view_yview, 0, room_height - view_hview );
                
                } else {

                    camera_move = false;
                    object_custom_menu.menu_on = true;
                    
                    with( object_custom_menu ) { x = view_xview + ( view_wview / 2 ); y = view_yview + view_hview - 16 - 92; }
                    
                    with( object_custom_prev ) { x = view_xview + 72; y = view_yview + view_hview - 48; }
                    with( object_custom_block_1 ) { x = view_xview + ( 72 * 2 ); y = view_yview + view_hview - 48; }
                    with( object_custom_block_2 ) { x = view_xview + ( 72 * 3 ); y = view_yview + view_hview - 48; }
                    with( object_custom_block_3 ) { x = view_xview + ( 72 * 4 ); y = view_yview + view_hview - 48; }
                    with( object_custom_block_4 ) { x = view_xview + ( 72 * 5 ); y = view_yview + view_hview - 48; }
                    with( object_custom_block_5 ) { x = view_xview + ( 72 * 6 ); y = view_yview + view_hview - 48; }
                    with( object_custom_next ) { x = view_xview + ( 72 * 7 ); y = view_yview + view_hview - 48; }
                    
                    with( object_custom_delete ) { x = view_xview + ( 72 * 8 ); y = view_yview + view_hview - 48; }
                    with( object_custom_camera ) { x = view_xview + ( 72 * 9 ); y = view_yview + view_hview - 48; }
                    
                    with( object_custom_save_prev ) { x = view_xview + ( 72 * 14 ); y = view_yview + view_hview - 48; }
                    with( object_custom_save ) { x = view_xview + ( 72 * 15 ); y = view_yview + view_hview - 48; }
                    with( object_custom_save_next ) { x = view_xview + ( 72 * 16 ); y = view_yview + view_hview - 48; }
                
                }
            
            }
        
        }
    
    }
    
    if( mouse_check_button_released( mb_right ) ) { item_delete = false; }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Exit

    if( keyboard_check_pressed( vk_escape ) || keyboard_check_pressed( vk_backspace ) ) {
    
        if( saved ) { if( show_question( "나가시겠습니까?" ) ) {

            global.game_esc = true;
            room_goto( room_menu );

        } } else { if( show_question( "저장을 하지 않고 나가시겠습니까?" ) ) {
        
            global.game_esc = true;
            room_goto( room_menu );
        
        } }
        
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    
    if( surface_exists( surface ) ) {
        
        surface_set_target( surface );
        draw_clear_alpha( c_white,0 );
        surface_reset_target();
        surface_free( surface );
        
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    
    if( surface_exists( surface ) ) {
        
        surface_set_target( surface );
        draw_clear_alpha( c_white,0 );
        surface_reset_target();
        surface_free( surface );
        
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>   
    // Surface
    
    draw_set_alpha( 1 ); 
    
    if( surface_exists( surface ) ) { 
    
        if( surface_update ) {
        
            surface_set_target( surface );
            
            if( item_delete ) {

                draw_clear_alpha( c_white,0 );
                for( var i = 0; i &lt; grid_width; i++ ) { for( var j = 0; j &lt; grid_height; j++ ) {
        
                    if( grid[i,j] == noone ) { continue; }
                    else { custom_action_draw( grid[i,j], i, j ); }
        
                } }
                
            } else { custom_action_draw( grid[grid_mouse_x,grid_mouse_y], grid_mouse_x, grid_mouse_y ); }
            
            surface_reset_target();
            
            surface_update = false;
            
        }
        draw_surface( surface, 0, 0 );
    
    } else { 
    
        surface = surface_create( room_width, room_height );
        
        surface_set_target( surface );
        
        draw_clear_alpha( c_white,0 );
        
        for( var i = 0; i &lt; grid_width; i++ ) { for( var j = 0; j &lt; grid_height; j++ ) {
        
            if( grid[i,j] == noone ) { continue; }
            else { custom_action_draw( grid[i,j], i, j ); }
        
        } }
        
        surface_reset_target();
        
    }
    
    // Draw select
    
    draw_set_alpha( 0.2 );
    
    if( grid_empty ) { draw_rectangle( grid_mouse_xx, grid_mouse_yy, grid_mouse_xx + 64, grid_mouse_yy + 64, false ); }
    else { draw_rectangle_colour( grid_mouse_xx, grid_mouse_yy, grid_mouse_xx + 64, grid_mouse_yy + 64, c_red, c_red, c_red, c_red, false ); }
    
    draw_set_alpha( 1 ); 
    
    // Menu
    
    if( !camera_move ) {
        
        if( object_custom_menu.menu_on ) {
        
            with( object_custom_menu ) {
            
                draw_self();
                draw_set_alpha( 0.25 );
                draw_rectangle_colour( view_xview, y + 16, view_xview + view_wview, view_yview + view_hview, c_white, c_white, c_white, c_white, false );
            
            }
            draw_set_alpha( 1 );
            
            with( object_custom_prev ) { draw_self(); }
            with( object_custom_block_1 ) { if( block != noone ) { draw_self(); } }
            with( object_custom_block_2 ) { if( block != noone ) { draw_self(); } }
            with( object_custom_block_3 ) { if( block != noone ) { draw_self(); } }
            with( object_custom_block_4 ) { if( block != noone ) { draw_self(); } }
            with( object_custom_block_5 ) { if( block != noone ) { draw_self(); } }
            with( object_custom_next ) { draw_self(); }
            
            with( object_custom_delete ) { draw_self(); }
            with( object_custom_camera ) { draw_self(); }
            
            with( object_custom_save_prev ) { draw_self(); }
            with( object_custom_save ) { draw_self(); draw_text( x, y, string( save_slot ) ); }
            with( object_custom_save_next ) { draw_self(); }
            
        
        } else {
        
            with( object_custom_menu ) {
            
                draw_self();
                        
            }
            
        }
    
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
