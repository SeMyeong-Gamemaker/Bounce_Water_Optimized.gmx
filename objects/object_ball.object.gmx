<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_ball_48</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variable

    // Moving
    
    ball_gravity = 0.75;
    
    ball_speed = 6;
    ball_speed_j = 15; // Jump
    ball_speed_v = 0;  // Vertical
    ball_speed_h = 0;  // Horizontal
    ball_speed_m = 0.5;// Movement
    
    ball_jump = false;
    
    // Water
    
    ball_water = 0;
    ball_pollution = 0;
    ball_water_max = 100;
    
    // Drawing
    
    ball_scale_x = 1;
    ball_scale_y = 1;
    
    colour_water = make_colour_hsv( 133, 213, 150 );
    colour_pollution = make_colour_hsv( 31, 48, 80 );
    
    // Camera
    
    // Mobile Control
    
    display_width = display_get_width();
    display_height = display_get_height();
    
    display_left = false;
    display_right = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    instance_create( x, y, object_ingame_death );
    
    global.stage_death[global.world,global.stage[global.world]]++;
    
    repeat( 16 ) {
    
        with( instance_create( x + lengthdir_x( random( 24 ), random( 360 ) ), y + lengthdir_y( random( 24 ), random( 360 ) ), object_ball_drop ) ) {
        
            gravity = 0.25;
            friction = 0.05;
            image_alpha = 0.5;
            pollution = other.ball_pollution / other.ball_water_max;
            motion_add( random( 360 ), random_range( 3, 5 ) );
        
        }
    
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Moving Preparation

    // Device Input
    
    var device_0 = device_mouse_check_button( 0, mb_left );
    var device_1 = device_mouse_check_button( 1, mb_left );
    var device_left = false;
    var device_right = false;
    
    if( device_0 || device_1 ) {
    
        if( ( device_mouse_raw_x( 0 ) &lt; display_width / 2 ) || ( device_mouse_raw_x( 1 ) &lt; display_width / 2 ) ) { device_left = true; }
        if( ( device_mouse_raw_x( 0 ) &gt;= display_width / 2 ) || ( device_mouse_raw_x( 1 ) &gt;= display_width / 2 ) ) { device_right = true; }
        if( device_left &amp;&amp; device_right ) { device_left = false; device_right = false; }
    
    }
    
    // Keyboard Input
    // REMOVE IF NOT NEEDED
    
    var key_left = keyboard_check( ord( 'A' ) );
    var key_right = keyboard_check( ord( 'D' ) );
    
    if( key_left || key_right ) {
    
        if( key_left ) { device_left = true; }
        if( key_right ) { device_right = true; }
        if( device_left &amp;&amp; device_right ) { device_left = false; device_right = false; }
    
    }
    
    // Vertical Movement
    
    if( place_meeting( x, y + 1, object_block ) ) {  // Ball touches ground block( no effect )
    
        ball_speed_v = 0;
        ball_action_jump( ball_speed_j, 0.75, 1.25 );
    
    } else if( place_meeting( x, y + 1, object_pipe ) ) {
    
        ball_speed_v = 0;
        ball_action_finish();
    
    } else {  // Ball is in midair
    
        ball_action_gravity( 15, ball_gravity );
    
    }
    
    // Horizontal Movement
    
    if( device_left ) {  // Left
    
        if( ball_speed_h &gt; -ball_speed ) { ball_speed_h -= ball_speed_m; }
        else { ball_speed_h = -ball_speed; }
    
    }
    
    if( device_right ) {  // Right
    
        if( ball_speed_h &lt; ball_speed ) { ball_speed_h += ball_speed_m; }
        else { ball_speed_h = ball_speed; }
    
    }
    
    if( !device_left &amp;&amp; !device_right ) {  // Noting
    
        if( ball_speed_h != 0 ) {
        
            ball_speed_h = lerp( ball_speed_h, 0, 0.075 );
        
        }
    
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Excute Collision &amp; Moving

    // Horizontal Collision
    
    ball_action_collision_horizontal( object_block, true );
    ball_action_collision_horizontal( object_pipe, true );
    
    x += ball_speed_h;
    
    // Vertical Collision
    
    ball_action_collision_vertical( object_block, true );
    ball_action_collision_vertical( object_pipe, true );
    
    y += ball_speed_v;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Effect

    ball_scale_x = lerp( ball_scale_x, 1, 0.1 );
    ball_scale_y = lerp( ball_scale_y, 1, 0.1 );
    
    var ground = place_meeting( x, y + 1, object_block ) &amp;&amp; !place_meeting( x, yprevious + 1, object_block );
    
    var touch = false;
    if( ground ) { touch = true; }
    
    if( touch ) {
    
        ball_scale_x = 1.25;
        ball_scale_y = 0.75;
        
        ball_jump = false;
        
        repeat( 8 ) {
    
        with( instance_create( x + lengthdir_x( random( 24 ), random_range( 225, 315 ) ), y + lengthdir_y( random( 24 ), random_range( 225, 315 ) ), object_ball_drop ) ) {
        
            gravity = 0.25;
            friction = 0.05;
            image_alpha = 0.5;
            pollution = other.ball_pollution / other.ball_water_max;
            motion_add( random( 360 ), random_range( 3, 5 ) );
        
        }
    
    }
    
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera Movement

    var room_width_2 = room_width / 2;
    var room_height_2 = room_height / 2;
    var room_distance_y = point_distance( 0, y, 0, room_height_2 ) / room_height_2;
    var room_distance_x = point_distance( x, 0, room_width_2, 0 ) / room_width_2;
    var angle = 0;
    
    if( x &lt; room_width_2 ) {
    
        if( y &lt; room_height_2 ) { angle = 5 * room_distance_y; }
        else if( y &gt; room_height_2 ) { angle = -5 * room_distance_y; }
    
    } else if( x &gt; room_width_2 ) {
    
        if( y &lt; room_height_2 ) { angle = -5 * room_distance_y; }
        else if( y &gt; room_height_2 ) { angle = 5 * room_distance_y; }
        
    } else { angle = 0; }
    
    view_angle[0] = angle * room_distance_x;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Death

    if( y &gt;= room_height ) { instance_destroy(); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Ball

    draw_sprite_ext( sprite_index, 0, x, y, ball_scale_x, ball_scale_y, direction, c_white, 1 );
    draw_sprite_ext( sprite_index, 1, x, y, ball_scale_x, ball_scale_y, direction, c_white, ball_pollution / ball_water_max );

    draw_sprite_ext( sprite_button_mask, 0, view_xview + ( view_wview / 2 ), view_yview + 32, 5 * ( ball_water + ball_pollution ) / ball_water_max, 1, -view_angle, colour_water, 1 );
    draw_sprite_ext( sprite_button_mask, 0, view_xview + ( view_wview / 2 ), view_yview + 32, 5 * ball_pollution / ball_water_max, 1, -view_angle, colour_pollution, 1 );
    
    draw_set_colour( c_white );
    draw_text_transformed( view_xview + ( view_wview / 2 ), view_yview + 32, string( ball_water + ball_pollution ), 1, 1, -view_angle );


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
